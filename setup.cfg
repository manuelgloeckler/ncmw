# This file is used to configure your project.
# Read more about the various options under:
# http://setuptools.readthedocs.io/en/latest/setuptools.html#configuring-setup-using-setup-cfg-files

[metadata]
name = ncmw
description = This is a workflow for investigating metabolic community models on a nasal medium.
author = manuelgloeckler
author_email = manuel.gloeckler@student.uni-tuebingen.de
license = MIT
long_description = file: README.md
project_urls =
    Documentation = https://google.com

# Change if running only on Windows, Mac or Linux (comma-separated)
platforms = any

# Add here all kinds of additional classifiers as defined under
# https://pypi.python.org/pypi?%3Aaction=list_classifiers
classifiers =
    Development Status :: 4 - Beta
    Programming Language :: Python


[options]
zip_safe = False
packages = ncmw
include_package_data = True

# Require a min/specific Python version (comma-separated conditions)
python_requires = >=3.5

# Add here dependencies of your project (line-separated), e.g. requests>=2.2,<3.0.
# Version specifiers like >=2.2,<3.0 avoid problems due to API changes in
# new major versions. This works if the required packages follow Semantic Versioning.
# For more information, check out https://semver.org/.
install_requires =
    importlib-metadata; python_version<"3.8"
    pandas>=1.2.3
    cobra<=0.24.0
    scipy>=1.6.0
    numpy>=1.19.5
    matplotlib>=3.3.4
    setuptools<=57.5.0 # Some packe requires this...
    networkx
    torchdiffeq
    mip
    torch
    sbi @ git+https://github.com/sbi-dev/sbi.git@manuel_gloeckler_svi
    seaborn
    memote
    hydra-core
    sphinx
    omegaconf 
    matplotlib-venn
    pytest 
    pytest-cov
# scripts=
#     scripts/ncmw_analysis
#     scripts/ncmw_setup
#     scripts/ncmw_community
#     scripts/ncmw



[options.packages.find]
where = ncmw
exclude =
    tests

[options.extras_require]
# Add here additional requirements for extra features, to install with:
# `pip install ncmw[PDF]` like:
# PDF = ReportLab; RXP

# Add here test requirements (semicolon/line-separated)
testing =
    setuptools
    pytest
    pytest-cov

[options.entry_points]
# Add here console scripts like:
console_scripts =
    ncmw = ncmw.scripts.ncmw_scripts:run_ncmw
    ncmw_setup = ncmw.scripts.setup_scripts:run_setup_hydra
    ncmw_analysis = ncmw.scripts.analysis_scripts:run_analysis_hydra
    ncmw_community = ncmw.scripts.community_scripts:run_community_hydra



[tool:pytest]
# Specify command line options as you would do when invoking pytest directly.
# e.g. --cov-report html (or xml) for html/xml output or --junitxml junit.xml
# in order to write a coverage file that can be read by Jenkins.
# CAUTION: --cov flags may prohibit setting breakpoints while debugging.
#          Comment those flags to avoid this py.test issue.
addopts =
    --cov ncmw --cov-report term-missing
    --verbose
norecursedirs =
    dist
    build
    .tox
testpaths = tests
# Use pytest markers to select/deselect specific tests
# markers =
#     slow: mark tests as slow (deselect with '-m "not slow"')
#     system: mark end-to-end system tests

[bdist_wheel]
# Use this option if your package is pure-python
universal = 1

[devpi:upload]
# Options for the devpi: PyPI server and packaging tool
# VCS export must be deactivated since we are using setuptools-scm
no_vcs = 1
formats = bdist_wheel

[flake8]
# Some sane defaults for the code style checker flake8
max_line_length = 88
extend_ignore = E203, W503
# ^  Black-compatible
#    E203 and W503 have edge cases handled by black
exclude =
    .tox
    build
    dist
    .eggs
    docs/conf.py

[pyscaffold]
# PyScaffold's parameters when the project was created.
# This will be used when updating. Do not change!
version = 4.0.2
package = ncmw
extensions = 
